// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package order

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func DecodeModelsOrder(in *jlexer.Lexer, out *OrderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "number":
			out.Number = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "accrual":
			if in.IsNull() {
				in.Skip()
				out.Accrual = nil
			} else {
				if out.Accrual == nil {
					out.Accrual = new(float64)
				}
				*out.Accrual = float64(in.Float64())
			}
		case "uploaded_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func EncodeModelsOrder(out *jwriter.Writer, in OrderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix[1:])
		out.String(string(in.Number))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	if in.Accrual != nil {
		const prefix string = ",\"accrual\":"
		out.RawString(prefix)
		out.Float64(float64(*in.Accrual))
	}
	{
		const prefix string = ",\"uploaded_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	EncodeModelsOrder(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	EncodeModelsOrder(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	DecodeModelsOrder(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	DecodeModelsOrder(l, v)
}
func DecodeModelsOrder1(in *jlexer.Lexer, out *OrderListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(OrderListResponse, 0, 1)
			} else {
				*out = OrderListResponse{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 OrderResponse
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func EncodeModelsOrder1(out *jwriter.Writer, in OrderListResponse) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v OrderListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	EncodeModelsOrder1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	EncodeModelsOrder1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	DecodeModelsOrder1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	DecodeModelsOrder1(l, v)
}
func DecodeModelsOrder2(in *jlexer.Lexer, out *OrderDetailResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "order":
			out.Number = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "accrual":
			if in.IsNull() {
				in.Skip()
				out.Accrual = nil
			} else {
				if out.Accrual == nil {
					out.Accrual = new(float64)
				}
				*out.Accrual = float64(in.Float64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func EncodeModelsOrder2(out *jwriter.Writer, in OrderDetailResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix[1:])
		out.String(string(in.Number))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	if in.Accrual != nil {
		const prefix string = ",\"accrual\":"
		out.RawString(prefix)
		out.Float64(float64(*in.Accrual))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderDetailResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	EncodeModelsOrder2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderDetailResponse) MarshalEasyJSON(w *jwriter.Writer) {
	EncodeModelsOrder2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderDetailResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	DecodeModelsOrder2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderDetailResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	DecodeModelsOrder2(l, v)
}
func DecodeModelsOrder3(in *jlexer.Lexer, out *OrderAccrualRegister) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "order":
			out.Number = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func EncodeModelsOrder3(out *jwriter.Writer, in OrderAccrualRegister) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix[1:])
		out.String(string(in.Number))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderAccrualRegister) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	EncodeModelsOrder3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderAccrualRegister) MarshalEasyJSON(w *jwriter.Writer) {
	EncodeModelsOrder3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderAccrualRegister) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	DecodeModelsOrder3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderAccrualRegister) UnmarshalEasyJSON(l *jlexer.Lexer) {
	DecodeModelsOrder3(l, v)
}
func DecodeModelsOrder4(in *jlexer.Lexer, out *OrderAccrual) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "order":
			out.Number = string(in.String())
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func EncodeModelsOrder4(out *jwriter.Writer, in OrderAccrual) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix[1:])
		out.String(string(in.Number))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderAccrual) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	EncodeModelsOrder4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderAccrual) MarshalEasyJSON(w *jwriter.Writer) {
	EncodeModelsOrder4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderAccrual) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	DecodeModelsOrder4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderAccrual) UnmarshalEasyJSON(l *jlexer.Lexer) {
	DecodeModelsOrder4(l, v)
}
